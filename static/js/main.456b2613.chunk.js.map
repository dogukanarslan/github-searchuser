{"version":3,"sources":["Header.js","Users.js","Home.js","About.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Users","state","users","inputVal","showing","username","followers","following","repos","bio","error","avatar","handleSearch","bind","handleSubmit","fetch","then","res","json","setState","data","name","public_repos","avatar_url","event","this","target","value","setTimeout","preventDefault","console","log","message","style","height","width","margin","onSubmit","placeholder","onChange","type","alt","src","React","Component","Home","position","About","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.456b2613.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Header(){\r\n  return(\r\n    <ul className=\"navbar-nav\">\r\n      <li><Link to=\"/\">Home</Link></li>\r\n      <li><Link to=\"/about\">About</Link></li>\r\n    </ul>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nclass Users extends React.Component{\r\n  constructor(){\r\n    super()\r\n    this.state=({\r\n      users:[],\r\n      inputVal:\"\",\r\n      showing: false,\r\n      username:\"\",\r\n      followers: 0,\r\n      following: 0,\r\n      repos: 0,\r\n      bio: \"\",\r\n      error: \"\",\r\n      avatar: \"https://avatars1.githubusercontent.com/u/810438?s=460&v=4\",\r\n      showing: false})\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(\"https://api.github.com/users\")\r\n    .then(res => res.json())\r\n    .then(res => this.setState({\r\n      users: res\r\n    }))\r\n    fetch(`https://api.github.com/users/gaearon`)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      this.setState({\r\n        username: data.name,\r\n        repos: data.public_repos,\r\n        avatar: data.avatar_url,\r\n        bio: data.bio,\r\n        followers: data.followers,\r\n        following: data.following\r\n      })\r\n    })\r\n  }\r\n\r\n  handleSearch(event){\r\n    this.setState({inputVal: event.target.value})\r\n  }\r\n  showing(){\r\n    this.setState({showing: true},()=>setTimeout(()=>this.setState({showing: false}),1500))\r\n  }\r\n\r\n  handleSubmit(event){\r\n    event.preventDefault();\r\n    fetch(`https://api.github.com/users/${this.state.inputVal}`)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      console.log(data)\r\n      if (data.message){\r\n        this.setState({error: data.message})\r\n      } else {\r\n      this.showing();\r\n      this.setState({\r\n        username: data.name,\r\n        repos: data.public_repos,\r\n        avatar: data.avatar_url,\r\n        bio: data.bio,\r\n        followers: data.followers,\r\n        following: data.following\r\n      },()=>this.setState({inputVal: \"\"})\r\n    )\r\n      this.setState({error: null})\r\n    }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div style={{height: \"90vh\",width: \"50%\", margin: \"0 auto\"}}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input placeholder={\"Username\"} value={this.state.inputVal} onChange={this.handleSearch}/>\r\n          <button type=\"submit\">Search</button>\r\n        </form>\r\n        {this.state.showing && <p className=\"Notification\">User Found</p>}\r\n        {this.state.error ? <p>{this.state.error}</p> : <div className=\"card\">\r\n          <img alt=\"\" style={{width: \"100%\"}} src={this.state.avatar}/>\r\n          <div className=\"container\">\r\n            <h4><b>{this.state.username}</b></h4>\r\n            <p>Followers: {this.state.followers}</p>\r\n            <p>Following: {this.state.following}</p>\r\n            <p>Repositories: {this.state.repos}</p>\r\n            {this.state.bio ? <p>Bio: {this.state.bio}</p> : null}\r\n          </div>\r\n        </div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Users\r\n","import React from \"react\";\r\nimport Users from \"./Users\";\r\n\r\nexport default function Home(){\r\n  return(\r\n    <div style={{position: \"relative\",}}>\r\n      <Users />\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About(){\r\n  return(\r\n    <div className=\"About\">\r\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras elit orci, tempor a magna eu, sagittis auctor tellus. Vestibulum gravida facilisis volutpat. Donec tristique enim et sapien sodales tincidunt. Aliquam viverra magna metus. Integer arcu enim, mollis id ligula vitae, posuere ullamcorper sem. Suspendisse tempor pretium quam. Morbi aliquam ante urna, sit amet egestas metus convallis quis. Phasellus aliquam lorem in mi facilisis tristique. Integer consectetur auctor augue eget facilisis. Pellentesque nec nunc euismod, ullamcorper libero eget, aliquet neque. Maecenas placerat arcu mauris. Proin molestie purus at lacinia dictum.</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport {Switch, Route} from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport About from \"./About\";\r\n\r\nexport default function Main (){\r\n  return(\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home}/>\r\n      <Route exact path=\"/about\" component={About}/>\r\n    </Switch>\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}